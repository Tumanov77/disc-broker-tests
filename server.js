const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const cors = require('cors');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// Telegram Bot setup
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: false });
const CHANNEL_ID = process.env.TELEGRAM_CHANNEL_ID;

// DISC analysis function
function analyzeDISCProfile(scores, position) {
    const analysis = {
        dominantType: '',
        score: 0,
        recommendation: '',
        strengths: [],
        concerns: [],
        suitability: ''
    };

    // Find dominant type
    const types = Object.keys(scores);
    analysis.dominantType = types.reduce((a, b) => scores[a] > scores[b] ? a : b);
    analysis.score = scores[analysis.dominantType];

    // Analysis for brokers in real estate sales
    if (scores.I > 10 && scores.D >= 7) {
        analysis.suitability = '–û–¢–õ–ò–ß–ù–û';
        analysis.recommendation = '–ò–¥–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏';
        analysis.strengths = ['–í—ã—Å–æ–∫–∞—è —Ö–∞—Ä–∏–∑–º–∞', '–†–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–£–º–µ–Ω–∏–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤'];
    } else if (scores.I > 8) {
        analysis.suitability = '–•–û–†–û–®–û';
        analysis.recommendation = '–•–æ—Ä–æ—à–∏–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø—Ä–æ–¥–∞–∂ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏';
        analysis.strengths = ['–•–∞—Ä–∏–∑–º–∞', '–û–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'];
        if (scores.D < 5) analysis.concerns.push('–ú–æ–∂–µ—Ç –Ω–µ —Ö–≤–∞—Ç–∞—Ç—å –Ω–∞–ø–æ—Ä–∏—Å—Ç–æ—Å—Ç–∏');
    } else if (scores.D > 8) {
        analysis.suitability = '–£–ú–ï–†–ï–ù–ù–û';
        analysis.recommendation = '–†–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –µ—Å—Ç—å, –Ω–æ —Ö–∞—Ä–∏–∑–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π';
        analysis.strengths = ['–†–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–¶–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω–æ—Å—Ç—å'];
        analysis.concerns.push('–ù–∏–∑–∫–∞—è —Ö–∞—Ä–∏–∑–º–∞ –º–æ–∂–µ—Ç –º–µ—à–∞—Ç—å –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö');
    } else {
        analysis.suitability = '–ù–ï –ü–û–î–•–û–î–ò–¢';
        analysis.recommendation = '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏';
        analysis.concerns = ['–ù–∏–∑–∫–∞—è —Ö–∞—Ä–∏–∑–º–∞', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'];
    }

    return analysis;
}

// Format message for Telegram
function formatTelegramMessage(candidateData, analysis) {
    const { name, telegram, position, scores } = candidateData;
    
    let message = `üéØ *–ù–û–í–´–ô –ö–ê–ù–î–ò–î–ê–¢ - –¢–ï–°–¢ 1 DISC ‚Üí —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è*\n`;
    message += `üè† *–¢–µ—Å—Ç –¥–ª—è –±—Ä–æ–∫–µ—Ä–æ–≤ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏*\n\n`;
    message += `üë§ *–ö–∞–Ω–¥–∏–¥–∞—Ç:* ${name}\n`;
    message += `üì± *Telegram:* @${telegram.replace('@', '')}\n`;
    message += `üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleString('ru-RU')}\n\n`;
    
    message += `üìä *–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê 1:*\n`;
    message += `üî¥ D (–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π): ${scores.D}\n`;
    message += `üü† I (–í–ª–∏—è—é—â–∏–π): ${scores.I}\n`;
    message += `üü¢ S (–°—Ç–∞–±–∏–ª—å–Ω—ã–π): ${scores.S}\n`;
    message += `üîµ C (–°–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π): ${scores.C}\n\n`;
    
    message += `üéØ *–ê–ù–ê–õ–ò–ó –ü–û–î–•–û–î–ò–ú–û–°–¢–ò:*\n`;
    message += `üìà *–û—Ü–µ–Ω–∫–∞:* ${analysis.suitability}\n`;
    message += `üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* ${analysis.recommendation}\n\n`;
    
    if (analysis.strengths.length > 0) {
        message += `‚úÖ *–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:*\n`;
        analysis.strengths.forEach(strength => {
            message += `‚Ä¢ ${strength}\n`;
        });
        message += `\n`;
    }
    
    if (analysis.concerns.length > 0) {
        message += `‚ö†Ô∏è *–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:*\n`;
        analysis.concerns.forEach(concern => {
            message += `‚Ä¢ ${concern}\n`;
        });
        message += `\n`;
    }
    
    message += `üîó *–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:* –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è`;
    
    return message;
}

// Format EQ test message for Telegram
function formatEQTelegramMessage(candidateData) {
    const { name, telegram, position, score, analysis } = candidateData;
    
    let message = `üß† *–ù–û–í–´–ô –ö–ê–ù–î–ò–î–ê–¢ - –¢–ï–°–¢ 2 EQ ‚Üí —É–º–µ–Ω–∏–µ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞*\n`;
    message += `üè† *–¢–µ—Å—Ç –¥–ª—è –±—Ä–æ–∫–µ—Ä–æ–≤ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏*\n\n`;
    message += `üë§ *–ö–∞–Ω–¥–∏–¥–∞—Ç:* ${name}\n`;
    message += `üì± *Telegram:* @${telegram.replace('@', '')}\n`;
    message += `üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleString('ru-RU')}\n\n`;
    
    message += `üìä *–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê 2:*\n`;
    message += `üéØ *–ë–∞–ª–ª—ã:* ${score}/40\n`;
    message += `üìà *–£—Ä–æ–≤–µ–Ω—å:* ${analysis.level}\n`;
    message += `üí° *–û–ø–∏—Å–∞–Ω–∏–µ:* ${analysis.description}\n`;
    message += `üîç *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* ${analysis.recommendation}\n\n`;
    
    // –ê–Ω–∞–ª–∏–∑ –¥–ª—è –±—Ä–æ–∫–µ—Ä–æ–≤ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    if (score >= 30) {
        message += `‚úÖ *–û—Ç–ª–∏—á–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏!* –í—ã—Å–æ–∫–∏–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø–æ–º–æ–∂–µ—Ç –≤ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.\n\n`;
    } else if (score >= 20) {
        message += `‚ö†Ô∏è *–•–æ—Ä–æ—à–æ, –Ω–æ –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª.* –°—Ä–µ–¥–Ω–∏–π EQ –º–æ–∂–Ω–æ —Ä–∞–∑–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º.\n\n`;
    } else {
        message += `‚ùå *–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è.* –ù–∏–∑–∫–∏–π EQ –º–æ–∂–µ—Ç –º–µ—à–∞—Ç—å –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂–∞—Ö –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.\n\n`;
    }
    
    message += `üîó *–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:* –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è`;
    
    return message;
}

// Format SPQ test message for Telegram
function formatSPQTelegramMessage(candidateData) {
    const { name, telegram, position, score, analysis } = candidateData;

    let message = `üí™ *–ù–û–í–´–ô –ö–ê–ù–î–ò–î–ê–¢ - –¢–ï–°–¢ 3 SPQ ‚Üí –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö*\n`;
    message += `üè† *–¢–µ—Å—Ç –¥–ª—è –±—Ä–æ–∫–µ—Ä–æ–≤ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏*\n\n`;
    message += `üë§ *–ö–∞–Ω–¥–∏–¥–∞—Ç:* ${name}\n`;
    message += `üì± *Telegram:* @${telegram.replace('@', '')}\n`;
    message += `üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleString('ru-RU')}\n\n`;

    message += `üìä *–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê 3:*\n`;
    message += `üéØ *–ë–∞–ª–ª—ã:* ${score}/30\n`;
    message += `üìà *–£—Ä–æ–≤–µ–Ω—å:* ${analysis.level}\n`;
    message += `üí° *–û–ø–∏—Å–∞–Ω–∏–µ:* ${analysis.description}\n`;
    message += `üîç *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* ${analysis.recommendation}\n\n`;

    // –ê–Ω–∞–ª–∏–∑ –¥–ª—è –±—Ä–æ–∫–µ—Ä–æ–≤ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    if (score >= 25) {
        message += `‚úÖ *–û—Ç–ª–∏—á–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏!* –í—ã—Å–æ–∫–∞—è –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –ø–æ–º–æ–∂–µ—Ç –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂–∞—Ö.\n\n`;
    } else if (score >= 18) {
        message += `‚ö†Ô∏è *–•–æ—Ä–æ—à–æ, –Ω–æ –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª.* –°—Ä–µ–¥–Ω—è—è –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–≤–∏—Ç–∞.\n\n`;
    } else {
        message += `‚ùå *–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è.* –ù–∏–∑–∫–∞—è –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –º–æ–∂–µ—Ç –º–µ—à–∞—Ç—å –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.\n\n`;
    }

    message += `üîó *–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:* –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è`;

    return message;
}

// Format Hubbard test message for Telegram
function formatHubbardTelegramMessage(candidateData) {
    const { name, telegram, position, score, averageTone, analysis } = candidateData;

    let message = `üìà *–ù–û–í–´–ô –ö–ê–ù–î–ò–î–ê–¢ - –¢–ï–°–¢ 5 ‚Üí –¢–æ–Ω–∞–ª—å–Ω–∞—è —à–∫–∞–ª–∞ –•–∞–±–±–∞—Ä–¥–∞*\n`;
    message += `üéØ *–û–±—â–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π*\n\n`;
    message += `üë§ *–ö–∞–Ω–¥–∏–¥–∞—Ç:* ${name}\n`;
    message += `üì± *Telegram:* @${telegram.replace('@', '')}\n`;
    message += `üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleString('ru-RU')}\n\n`;

    message += `üìä *–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê 5:*\n`;
    message += `üéØ *–û–±—â–∏–π –±–∞–ª–ª:* ${score}/40\n`;
    message += `üìà *–°—Ä–µ–¥–Ω–∏–π —Ç–æ–Ω:* ${averageTone}\n`;
    message += `üí° *–£—Ä–æ–≤–µ–Ω—å:* ${analysis.level}\n`;
    message += `üîç *–û–ø–∏—Å–∞–Ω–∏–µ:* ${analysis.description}\n`;
    message += `‚úÖ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* ${analysis.recommendation}\n\n`;

    // –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞
    if (parseFloat(averageTone) >= 3.0) {
        message += `üü¢ *–ñ–ò–í–û–ô –¢–û–ù!* –ö–∞–Ω–¥–∏–¥–∞—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π, —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π –∏ –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–π.\n`;
        message += `‚úÖ *–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã* - –≤—ã—Å–æ–∫–∏–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å.\n\n`;
    } else if (parseFloat(averageTone) >= 2.0) {
        message += `üü° *–°–¢–ê–ë–ò–õ–¨–ù–´–ô –¢–û–ù* - –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è.\n`;
        message += `‚ö†Ô∏è *–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è* - –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞.\n\n`;
    } else {
        message += `üî¥ *–ù–ò–ó–ö–ò–ô –¢–û–ù* - —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π, –∏—Å—Ç–æ—á–Ω–∏–∫ —Ö–∞–æ—Å–∞.\n`;
        message += `‚ùå *–ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø* - –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–º–∞–Ω–¥–µ.\n\n`;
    }

    message += `üîó *–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:* –°–≤—è–∑–∞—Ç—å—Å—è —Å HR @LyubovTarasova11`;

    return message;
}

// Format Integrity test message for Telegram
function formatIntegrityTelegramMessage(candidateData) {
    const { name, telegram, position, score, analysis } = candidateData;

    let message = `‚úÖ *–ù–û–í–´–ô –ö–ê–ù–î–ò–î–ê–¢ - –¢–ï–°–¢ 6 ‚Üí Integrity Test*\n`;
    message += `üéØ *–û–±—â–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π*\n\n`;
    message += `üë§ *–ö–∞–Ω–¥–∏–¥–∞—Ç:* ${name}\n`;
    message += `üì± *Telegram:* @${telegram.replace('@', '')}\n`;
    message += `üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleString('ru-RU')}\n\n`;

    message += `üìä *–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê 6:*\n`;
    message += `üéØ *–û–±—â–∏–π –±–∞–ª–ª:* ${score}/30\n`;
    message += `üí° *–£—Ä–æ–≤–µ–Ω—å:* ${analysis.level}\n`;
    message += `üîç *–û–ø–∏—Å–∞–Ω–∏–µ:* ${analysis.description}\n`;
    message += `‚úÖ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* ${analysis.recommendation}\n\n`;

    // –ê–Ω–∞–ª–∏–∑ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏
    if (score >= 25) {
        message += `üü¢ *–í–´–°–û–ö–ê–Ø –ß–ï–°–¢–ù–û–°–¢–¨!* –ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞–¥—ë–∂–µ–Ω –∏ —ç—Ç–∏—á–µ–Ω.\n`;
        message += `‚úÖ *–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –Ω–∞–π–º–∞* –Ω–∞ –ª—é–±—ã–µ –ø–æ–∑–∏—Ü–∏–∏, –≤–∫–ª—é—á–∞—è —Ä—É–∫–æ–≤–æ–¥—è—â–∏–µ.\n\n`;
    } else if (score >= 18) {
        message += `üü° *–°–†–ï–î–ù–ò–ô –£–†–û–í–ï–ù–¨ –ß–ï–°–¢–ù–û–°–¢–ò* - –≤–æ–∑–º–æ–∂–Ω—ã –∫–æ–º–ø—Ä–æ–º–∏—Å—Å—ã —Å —ç—Ç–∏–∫–æ–π.\n`;
        message += `‚ö†Ô∏è *–¢—Ä–µ–±—É–µ—Ç –Ω–∞–±–ª—é–¥–µ–Ω–∏—è* - –≤–æ–∑–º–æ–∂–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ä–æ–∫ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º.\n\n`;
    } else if (score >= 12) {
        message += `üü† *–ù–ò–ó–ö–ò–ô –£–†–û–í–ï–ù–¨ –ß–ï–°–¢–ù–û–°–¢–ò* - —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç.\n`;
        message += `‚ùå *–ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø* –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.\n\n`;
    } else {
        message += `üî¥ *–ö–†–ò–¢–ò–ß–ï–°–ö–ò –ù–ò–ó–ö–ê–Ø –ß–ï–°–¢–ù–û–°–¢–¨* - –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–æ–±–ª–µ–º.\n`;
        message += `‚ùå *–ù–ï –ë–†–ê–¢–¨* - –º–æ–∂–µ—Ç –Ω–∞–Ω–µ—Å—Ç–∏ —É—â–µ—Ä–± –∫–æ–º–ø–∞–Ω–∏–∏.\n\n`;
    }

    message += `üîó *–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:* –°–≤—è–∑–∞—Ç—å—Å—è —Å HR @LyubovTarasova11`;

    return message;
}

// Format OCA test message for Telegram
function formatOCATelegramMessage(candidateData) {
    const { name, telegram, position, scores, analysis } = candidateData;

    let message = `üìä *–ù–û–í–´–ô –ö–ê–ù–î–ò–î–ê–¢ - –¢–ï–°–¢ 3 ‚Üí OCA (–û–∫—Å—Ñ–æ—Ä–¥—Å–∫–∏–π —Ç–µ—Å—Ç –ª–∏—á–Ω–æ—Å—Ç–∏)*\n`;
    message += `üéØ *–û–±—â–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π*\n\n`;
    message += `üë§ *–ö–∞–Ω–¥–∏–¥–∞—Ç:* ${name}\n`;
    message += `üì± *Telegram:* @${telegram.replace('@', '')}\n`;
    message += `üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleString('ru-RU')}\n\n`;

    message += `üìä *–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê 3:*\n`;
    message += `üéØ *–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ 10 —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º:*\n`;
    
    const characteristics = [
        '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å', '–°—á–∞—Å—Ç—å–µ', '–ù–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å', '–°–∞–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—å', '–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞',
        '–ö–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å', '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å', '–ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ', '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–£—Ä–æ–≤–µ–Ω—å –æ–±—â–µ–Ω–∏—è'
    ];
    
    characteristics.forEach((char, index) => {
        const score = scores[index];
        let emoji = 'üü¢';
        if (score < 0) emoji = 'üî¥';
        else if (score < 30) emoji = 'üü°';
        
        message += `${emoji} ${char}: ${score}\n`;
    });

    message += `\nüí° *–ê–Ω–∞–ª–∏–∑:* ${analysis.overallAssessment}\n`;
    message += `üîç *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* ${analysis.recommendation}\n\n`;

    // –ê–Ω–∞–ª–∏–∑ –¥–ª—è –≤—Å–µ—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
    if (analysis.suitability === '–û–¢–õ–ò–ß–ù–û') {
        message += `üü¢ *–û–¢–õ–ò–ß–ù–´–ô –ü–†–û–§–ò–õ–¨!* –°—Ç–∞–±–∏–ª—å–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ª—é–±—ã—Ö –ø–æ–∑–∏—Ü–∏–π.\n`;
        message += `‚úÖ *–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –Ω–∞–π–º–∞* –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.\n\n`;
    } else if (analysis.suitability === '–•–û–†–û–®–û') {
        message += `üü° *–•–û–†–û–®–ò–ô –ü–†–û–§–ò–õ–¨* - –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è.\n`;
        message += `‚ö†Ô∏è *–ü–æ–¥—Ö–æ–¥–∏—Ç —Å –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ–º* - –≤–æ–∑–º–æ–∂–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ä–æ–∫.\n\n`;
    } else if (analysis.suitability === '–ü–†–û–ë–õ–ï–ú–ê–¢–ò–ß–ù–û') {
        message += `üü† *–ü–†–û–ë–õ–ï–ú–ê–¢–ò–ß–ù–´–ô –ü–†–û–§–ò–õ–¨* - –µ—Å—Ç—å —Å–µ—Ä—å—ë–∑–Ω—ã–µ –º–∏–Ω—É—Å—ã.\n`;
        message += `‚ùå *–ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø* –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.\n\n`;
    } else {
        message += `üî¥ *–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–†–û–§–ò–õ–¨* - –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.\n`;
        message += `‚ùå *–ù–ï –ë–†–ê–¢–¨* - –º–æ–∂–µ—Ç –Ω–∞–Ω–µ—Å—Ç–∏ —É—â–µ—Ä–± –∫–æ–º–ø–∞–Ω–∏–∏.\n\n`;
    }

    message += `üîó *–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:* –°–≤—è–∑–∞—Ç—å—Å—è —Å HR @LyubovTarasova11`;

    return message;
}

// Format Aptitude test message for Telegram
function formatAptitudeTelegramMessage(candidateData) {
    const { name, telegram, position, scores, analysis } = candidateData;

    let message = `üéØ *–ù–û–í–´–ô –ö–ê–ù–î–ò–î–ê–¢ - –¢–ï–°–¢ 4 ‚Üí Aptitude Test*\n`;
    message += `üéØ *–û–±—â–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π*\n\n`;
    message += `üë§ *–ö–∞–Ω–¥–∏–¥–∞—Ç:* ${name}\n`;
    message += `üì± *Telegram:* @${telegram.replace('@', '')}\n`;
    message += `üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleString('ru-RU')}\n\n`;

    message += `üìä *–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê 4:*\n`;
    message += `üéØ *–û–±—â–∏–π –±–∞–ª–ª:* ${scores.totalScore}/60\n`;
    message += `üîç *–í–Ω–∏–º–∞–Ω–∏–µ:* ${scores.attentionScore}/20\n`;
    message += `üß† *–ü–æ–Ω–∏–º–∞–Ω–∏–µ:* ${scores.understandingScore}/20\n`;
    message += `‚ö° *–õ–æ–≥–∏–∫–∞:* ${scores.logicScore}/20\n`;
    message += `üí° *–£—Ä–æ–≤–µ–Ω—å:* ${analysis.level}\n`;
    message += `üîç *–û–ø–∏—Å–∞–Ω–∏–µ:* ${analysis.recommendation}\n\n`;

    // –ê–Ω–∞–ª–∏–∑ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
    if (scores.totalScore >= 45) {
        message += `üü¢ *–í–´–°–û–ö–ò–ï –°–ü–û–°–û–ë–ù–û–°–¢–ò!* –û—Ç–ª–∏—á–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ.\n`;
        message += `‚úÖ *–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –Ω–∞–π–º–∞* –Ω–∞ –ª—é–±—ã–µ –ø–æ–∑–∏—Ü–∏–∏, –≤–∫–ª—é—á–∞—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ.\n\n`;
    } else if (scores.totalScore >= 30) {
        message += `üü° *–°–†–ï–î–ù–ò–ï –°–ü–û–°–û–ë–ù–û–°–¢–ò* - —Ö–æ—Ä–æ—à–∏–µ –±–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏.\n`;
        message += `‚ö†Ô∏è *–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –ø–æ–∑–∏—Ü–∏–π* —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–∞–∑–≤–∏—Ç–∏—è.\n\n`;
    } else {
        message += `üü† *–ù–ò–ó–ö–ò–ï –°–ü–û–°–û–ë–ù–û–°–¢–ò* - —Ç—Ä–µ–±—É—é—Ç —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞–≤—ã–∫–æ–≤.\n`;
        message += `‚ùå *–ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø* –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–ª–∏ —Å–ª–æ–∂–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π.\n\n`;
    }

    message += `üîó *–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:* –°–≤—è–∑–∞—Ç—å—Å—è —Å HR @LyubovTarasova11`;

    return message;
}

// API endpoint to receive DISC test results
app.post('/api/submit-disc', async (req, res) => {
    try {
        const { name, telegram, scores } = req.body;
        
        // Validate data
        if (!name || !telegram || !scores) {
            return res.status(400).json({ error: 'Missing required fields' });
        }
        
        // Analyze the profile
        const analysis = analyzeDISCProfile(scores, '–±—Ä–æ–∫–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏');
        
        // Prepare candidate data
        const candidateData = {
            name,
            telegram,
            position: '–±—Ä–æ–∫–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
            scores,
            timestamp: new Date().toISOString()
        };
        
        // Send to Telegram channel
        const message = formatTelegramMessage(candidateData, analysis);
        
        try {
            await bot.sendMessage(CHANNEL_ID, message, { 
                parse_mode: 'Markdown',
                disable_web_page_preview: true
            });
        } catch (telegramError) {
            console.error('Telegram error:', telegramError);
            // Continue even if Telegram fails
        }
        
        // Log to console for debugging
        console.log('DISC test submitted:', candidateData);
        console.log('Analysis:', analysis);
        
        res.json({ 
            success: true, 
            message: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram –∫–∞–Ω–∞–ª',
            analysis: analysis
        });
        
    } catch (error) {
        console.error('Error processing DISC test:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// API endpoint to receive EQ test results
app.post('/api/submit-eq', async (req, res) => {
    try {
        const { name, telegram, score, analysis } = req.body;
        
        // Validate data
        if (!name || !telegram || score === undefined || !analysis) {
            return res.status(400).json({ error: 'Missing required fields' });
        }
        
        // Prepare candidate data
        const candidateData = {
            name,
            telegram,
            position: '–±—Ä–æ–∫–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
            score,
            analysis,
            timestamp: new Date().toISOString()
        };
        
        // Send to Telegram channel
        const message = formatEQTelegramMessage(candidateData);
        
        try {
            await bot.sendMessage(CHANNEL_ID, message, { 
                parse_mode: 'Markdown',
                disable_web_page_preview: true
            });
        } catch (telegramError) {
            console.error('Telegram error:', telegramError);
            // Continue even if Telegram fails
        }
        
        // Log to console for debugging
        console.log('EQ test submitted:', candidateData);
        
        res.json({ 
            success: true, 
            message: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram –∫–∞–Ω–∞–ª',
            analysis: analysis
        });
        
    } catch (error) {
        console.error('Error processing EQ test:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// API endpoint to receive SPQ test results
app.post('/api/submit-spq', async (req, res) => {
    try {
        const { name, telegram, score, analysis } = req.body;
        
        // Validate data
        if (!name || !telegram || score === undefined || !analysis) {
            return res.status(400).json({ error: 'Missing required fields' });
        }
        
        // Prepare candidate data
        const candidateData = {
            name,
            telegram,
            position: '–±—Ä–æ–∫–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
            score,
            analysis,
            timestamp: new Date().toISOString()
        };
        
        // Send to Telegram channel
        const message = formatSPQTelegramMessage(candidateData);
        
        try {
            await bot.sendMessage(CHANNEL_ID, message, { 
                parse_mode: 'Markdown',
                disable_web_page_preview: true
            });
        } catch (telegramError) {
            console.error('Telegram error:', telegramError);
            // Continue even if Telegram fails
        }
        
        // Log to console for debugging
        console.log('SPQ test submitted:', candidateData);
        
        res.json({ 
            success: true, 
            message: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram –∫–∞–Ω–∞–ª',
            analysis: analysis
        });
        
    } catch (error) {
        console.error('Error processing SPQ test:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// API endpoint to receive Hubbard test results
app.post('/api/submit-hubbard', async (req, res) => {
    try {
        const { name, telegram, score, averageTone, analysis } = req.body;

        // Validate data
        if (!name || !telegram || score === undefined || !analysis) {
            return res.status(400).json({ error: 'Missing required fields' });
        }

        // Prepare candidate data
        const candidateData = {
            name,
            telegram,
            position: '–æ–±—â–∏–µ —Ç–µ—Å—Ç—ã', // General test
            score,
            averageTone,
            analysis,
            timestamp: new Date().toISOString()
        };

        // Send to Telegram channel
        const message = formatHubbardTelegramMessage(candidateData);

        try {
            await bot.sendMessage(CHANNEL_ID, message, {
                parse_mode: 'Markdown',
                disable_web_page_preview: true
            });
        } catch (telegramError) {
            console.error('Telegram error:', telegramError);
            // Continue even if Telegram fails
        }

        // Log to console for debugging
        console.log('Hubbard test submitted:', candidateData);

        res.json({
            success: true,
            message: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram –∫–∞–Ω–∞–ª',
            analysis: analysis
        });

    } catch (error) {
        console.error('Error processing Hubbard test:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// API endpoint to receive Integrity test results
app.post('/api/submit-integrity', async (req, res) => {
    try {
        const { name, telegram, score, analysis } = req.body;

        // Validate data
        if (!name || !telegram || score === undefined || !analysis) {
            return res.status(400).json({ error: 'Missing required fields' });
        }

        // Prepare candidate data
        const candidateData = {
            name,
            telegram,
            position: '–æ–±—â–∏–µ —Ç–µ—Å—Ç—ã', // General test
            score,
            analysis,
            timestamp: new Date().toISOString()
        };

        // Send to Telegram channel
        const message = formatIntegrityTelegramMessage(candidateData);

        try {
            await bot.sendMessage(CHANNEL_ID, message, {
                parse_mode: 'Markdown',
                disable_web_page_preview: true
            });
        } catch (telegramError) {
            console.error('Telegram error:', telegramError);
            // Continue even if Telegram fails
        }

        // Log to console for debugging
        console.log('Integrity test submitted:', candidateData);

        res.json({
            success: true,
            message: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram –∫–∞–Ω–∞–ª',
            analysis: analysis
        });

    } catch (error) {
        console.error('Error processing Integrity test:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// API endpoint to receive OCA test results
app.post('/api/submit-oca', async (req, res) => {
    try {
        const { name, telegram, scores, analysis } = req.body;

        // Validate data
        if (!name || !telegram || !scores || !analysis) {
            return res.status(400).json({ error: 'Missing required fields' });
        }

        // Prepare candidate data
        const candidateData = {
            name,
            telegram,
            position: '–æ–±—â–∏–µ —Ç–µ—Å—Ç—ã', // General test
            scores,
            analysis,
            timestamp: new Date().toISOString()
        };

        // Send to Telegram channel
        const message = formatOCATelegramMessage(candidateData);

        try {
            await bot.sendMessage(CHANNEL_ID, message, {
                parse_mode: 'Markdown',
                disable_web_page_preview: true
            });
        } catch (telegramError) {
            console.error('Telegram error:', telegramError);
            // Continue even if Telegram fails
        }

        // Log to console for debugging
        console.log('OCA test submitted:', candidateData);

        res.json({
            success: true,
            message: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram –∫–∞–Ω–∞–ª',
            analysis: analysis
        });

    } catch (error) {
        console.error('Error processing OCA test:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// API endpoint to receive Aptitude test results
app.post('/api/submit-aptitude', async (req, res) => {
    try {
        const { name, telegram, scores, analysis } = req.body;

        // Validate data
        if (!name || !telegram || !scores || !analysis) {
            return res.status(400).json({ error: 'Missing required fields' });
        }

        // Prepare candidate data
        const candidateData = {
            name,
            telegram,
            position: '–æ–±—â–∏–µ —Ç–µ—Å—Ç—ã', // General test
            scores,
            analysis,
            timestamp: new Date().toISOString()
        };

        // Send to Telegram channel
        const message = formatAptitudeTelegramMessage(candidateData);

        try {
            await bot.sendMessage(CHANNEL_ID, message, {
                parse_mode: 'Markdown',
                disable_web_page_preview: true
            });
        } catch (telegramError) {
            console.error('Telegram error:', telegramError);
            // Continue even if Telegram fails
        }

        // Log to console for debugging
        console.log('Aptitude test submitted:', candidateData);

        res.json({
            success: true,
            message: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram –∫–∞–Ω–∞–ª',
            analysis: analysis
        });

    } catch (error) {
        console.error('Error processing Aptitude test:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Health check endpoint
app.get('/health', (req, res) => {
    res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

// Serve the main page with test overview
app.get('/', (req, res) => {
    res.sendFile(__dirname + '/public/index.html');
});

// Serve tests with short codes
app.get('/t1', (req, res) => {
    res.sendFile(__dirname + '/public/general/disc-test.html');
});

app.get('/t2', (req, res) => {
    res.sendFile(__dirname + '/public/general/eq-test.html');
});

app.get('/t3', (req, res) => {
    res.sendFile(__dirname + '/public/general/oca-test.html');
});

app.get('/t4', (req, res) => {
    res.sendFile(__dirname + '/public/general/aptitude-test.html');
});

app.get('/t5', (req, res) => {
    res.sendFile(__dirname + '/public/general/hubbard-test.html');
});

app.get('/t6', (req, res) => {
    res.sendFile(__dirname + '/public/general/integrity-test.html');
});

app.get('/b1', (req, res) => {
    res.sendFile(__dirname + '/public/broker/spq-test.html');
});

// Legacy routes for backward compatibility
app.get('/general/disc-test.html', (req, res) => {
    res.redirect('/t1');
});

app.get('/general/eq-test.html', (req, res) => {
    res.redirect('/t2');
});

app.get('/general/hubbard-test.html', (req, res) => {
    res.redirect('/t5');
});

app.get('/general/integrity-test.html', (req, res) => {
    res.redirect('/t6');
});

app.get('/general/oca-test.html', (req, res) => {
    res.redirect('/t3');
});

app.get('/broker/spq-test.html', (req, res) => {
    res.redirect('/b1');
});

// Legacy routes for backward compatibility
app.get('/disc-test.html', (req, res) => {
    res.redirect('/general/disc-test.html');
});

app.get('/test2', (req, res) => {
    res.redirect('/general/eq-test.html');
});

app.get('/test3', (req, res) => {
    res.redirect('/broker/spq-test.html');
});

app.listen(PORT, () => {
    console.log(`üöÄ DISC Bot server running on port ${PORT}`);
    console.log(`üì± Telegram Bot Token: ${process.env.TELEGRAM_BOT_TOKEN ? '‚úÖ Set' : '‚ùå Missing'}`);
    console.log(`üì∫ Channel ID: ${process.env.TELEGRAM_CHANNEL_ID ? '‚úÖ Set' : '‚ùå Missing'}`);
    console.log(`üåê Main page: index.html with test overview`);
});
