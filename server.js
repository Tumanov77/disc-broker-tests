const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const cors = require('cors');
require('dotenv').config();
const { User, TestResult, Session } = require('./database');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// Telegram Bot setup
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: false });
const CHANNEL_ID = process.env.TELEGRAM_CHANNEL_ID;

// DISC analysis function
function analyzeDISCProfile(scores, position) {
    const analysis = {
        dominantType: '',
        score: 0,
        recommendation: '',
        strengths: [],
        concerns: [],
        suitability: ''
    };

    // Find dominant type
    const types = Object.keys(scores);
    analysis.dominantType = types.reduce((a, b) => scores[a] > scores[b] ? a : b);
    analysis.score = scores[analysis.dominantType];

    // Analysis for brokers in real estate sales
    if (scores.I > 10 && scores.D >= 7) {
        analysis.suitability = '–û–¢–õ–ò–ß–ù–û';
        analysis.recommendation = '–ò–¥–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏';
        analysis.strengths = ['–í—ã—Å–æ–∫–∞—è —Ö–∞—Ä–∏–∑–º–∞', '–†–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–£–º–µ–Ω–∏–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤'];
    } else if (scores.I > 8) {
        analysis.suitability = '–•–û–†–û–®–û';
        analysis.recommendation = '–•–æ—Ä–æ—à–∏–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø—Ä–æ–¥–∞–∂ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏';
        analysis.strengths = ['–•–∞—Ä–∏–∑–º–∞', '–û–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'];
        if (scores.D < 5) analysis.concerns.push('–ú–æ–∂–µ—Ç –Ω–µ —Ö–≤–∞—Ç–∞—Ç—å –Ω–∞–ø–æ—Ä–∏—Å—Ç–æ—Å—Ç–∏');
    } else if (scores.D > 8) {
        analysis.suitability = '–£–ú–ï–†–ï–ù–ù–û';
        analysis.recommendation = '–†–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –µ—Å—Ç—å, –Ω–æ —Ö–∞—Ä–∏–∑–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π';
        analysis.strengths = ['–†–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–¶–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω–æ—Å—Ç—å'];
        analysis.concerns.push('–ù–∏–∑–∫–∞—è —Ö–∞—Ä–∏–∑–º–∞ –º–æ–∂–µ—Ç –º–µ—à–∞—Ç—å –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö');
    } else {
        analysis.suitability = '–ù–ï –ü–û–î–•–û–î–ò–¢';
        analysis.recommendation = '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏';
        analysis.concerns = ['–ù–∏–∑–∫–∞—è —Ö–∞—Ä–∏–∑–º–∞', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'];
    }

    return analysis;
}

// Format message for Telegram
function formatTelegramMessage(candidateData, analysis) {
    const { name, telegram, position, scores } = candidateData;
    
    let message = `üéØ *–ù–û–í–´–ô –ö–ê–ù–î–ò–î–ê–¢ - –¢–ï–°–¢ 1 DISC ‚Üí —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è*\n`;
    message += `üè† *–¢–µ—Å—Ç –¥–ª—è –±—Ä–æ–∫–µ—Ä–æ–≤ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏*\n\n`;
    message += `üë§ *–ö–∞–Ω–¥–∏–¥–∞—Ç:* ${name}\n`;
    message += `üì± *Telegram:* @${telegram.replace('@', '')}\n`;
    message += `üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleString('ru-RU')}\n\n`;
    
    message += `üìä *–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê 1:*\n`;
    message += `üî¥ D (–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π): ${scores.D}\n`;
    message += `üü† I (–í–ª–∏—è—é—â–∏–π): ${scores.I}\n`;
    message += `üü¢ S (–°—Ç–∞–±–∏–ª—å–Ω—ã–π): ${scores.S}\n`;
    message += `üîµ C (–°–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π): ${scores.C}\n\n`;
    
    message += `üéØ *–ê–ù–ê–õ–ò–ó –ü–û–î–•–û–î–ò–ú–û–°–¢–ò:*\n`;
    message += `üìà *–û—Ü–µ–Ω–∫–∞:* ${analysis.suitability}\n`;
    message += `üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* ${analysis.recommendation}\n\n`;
    
    if (analysis.strengths.length > 0) {
        message += `‚úÖ *–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:*\n`;
        analysis.strengths.forEach(strength => {
            message += `‚Ä¢ ${strength}\n`;
        });
        message += `\n`;
    }
    
    if (analysis.concerns.length > 0) {
        message += `‚ö†Ô∏è *–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:*\n`;
        analysis.concerns.forEach(concern => {
            message += `‚Ä¢ ${concern}\n`;
        });
        message += `\n`;
    }
    
    message += `üîó *–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:* –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è`;
    
    return message;
}

// Format EQ test message for Telegram
function formatEQTelegramMessage(candidateData) {
    const { name, telegram, position, score, analysis } = candidateData;
    
    let message = `üß† *–ù–û–í–´–ô –ö–ê–ù–î–ò–î–ê–¢ - –¢–ï–°–¢ 2 EQ ‚Üí —É–º–µ–Ω–∏–µ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞*\n`;
    message += `üè† *–¢–µ—Å—Ç –¥–ª—è –±—Ä–æ–∫–µ—Ä–æ–≤ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏*\n\n`;
    message += `üë§ *–ö–∞–Ω–¥–∏–¥–∞—Ç:* ${name}\n`;
    message += `üì± *Telegram:* @${telegram.replace('@', '')}\n`;
    message += `üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleString('ru-RU')}\n\n`;
    
    message += `üìä *–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê 2:*\n`;
    message += `üéØ *–ë–∞–ª–ª—ã:* ${score}/40\n`;
    message += `üìà *–£—Ä–æ–≤–µ–Ω—å:* ${analysis.level}\n`;
    message += `üí° *–û–ø–∏—Å–∞–Ω–∏–µ:* ${analysis.description}\n`;
    message += `üîç *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* ${analysis.recommendation}\n\n`;
    
    // –ê–Ω–∞–ª–∏–∑ EQ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º
    const eqPercentage = (score / 40) * 100;
    
    if (eqPercentage >= 75) {
        message += `üü¢ *–í–´–°–û–ö–ò–ô EQ!* –û—Ç–ª–∏—á–Ω—ã–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç.\n`;
        message += `‚úÖ *–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã* - –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏.\n\n`;
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ EQ
        message += `üéØ *–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –î–û–õ–ñ–ù–û–°–¢–ò:*\n`;
        if (eqPercentage >= 75 && eqPercentage <= 90) {
            message += `‚Ä¢ –ë—Ä–æ–∫–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (75-90%)\n`;
            message += `‚Ä¢ –ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä (75-90%)\n`;
        }
        if (eqPercentage >= 70 && eqPercentage <= 85) {
            message += `‚Ä¢ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂ (70-85%)\n`;
            message += `‚Ä¢ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä (70-85%)\n`;
        }
        if (eqPercentage >= 65 && eqPercentage <= 80) {
            message += `‚Ä¢ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ (65-80%)\n`;
        }
        message += `\n`;
        
    } else if (eqPercentage >= 60) {
        message += `üü° *–°–†–ï–î–ù–ï-–í–´–°–û–ö–ò–ô EQ* - —Ö–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏.\n`;
        message += `‚ö†Ô∏è *–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π* - —Ç—Ä–µ–±—É–µ—Ç –æ—Ü–µ–Ω–∫–∏.\n\n`;
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ EQ
        message += `üéØ *–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –î–û–õ–ñ–ù–û–°–¢–ò:*\n`;
        if (eqPercentage >= 65 && eqPercentage <= 75) {
            message += `‚Ä¢ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è (65-75%)\n`;
        }
        if (eqPercentage >= 60 && eqPercentage <= 75) {
            message += `‚Ä¢ –î–∏–∑–∞–π–Ω–µ—Ä (60-75%)\n`;
        }
        if (eqPercentage >= 60 && eqPercentage <= 70) {
            message += `‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä (60-70%)\n`;
        }
        message += `\n`;
        
    } else if (eqPercentage >= 50) {
        message += `üü† *–°–†–ï–î–ù–ò–ô EQ* - –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏.\n`;
        message += `‚ö†Ô∏è *–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π* - —Ç—Ä–µ–±—É–µ—Ç —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞–≤—ã–∫–æ–≤.\n\n`;
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ EQ
        message += `üéØ *–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –î–û–õ–ñ–ù–û–°–¢–ò:*\n`;
        if (eqPercentage >= 55 && eqPercentage <= 65) {
            message += `‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä (55-65%)\n`;
        }
        if (eqPercentage >= 50 && eqPercentage <= 65) {
            message += `‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä (50-65%)\n`;
            message += `‚Ä¢ –ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥-–∞–Ω–∞–ª–∏—Ç–∏–∫ (50-65%)\n`;
        }
        message += `\n`;
        
    } else {
        message += `üî¥ *–ù–ò–ó–ö–ò–ô EQ* - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.\n`;
        message += `‚ùå *–ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø* –¥–ª—è –ø–æ–∑–∏—Ü–∏–π, —Ç—Ä–µ–±—É—é—â–∏—Ö —Ä–∞–±–æ—Ç—ã —Å –ª—é–¥—å–º–∏.\n\n`;
    }
    
    message += `üîó *–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:* –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è`;
    
    return message;
}

// Format SPQ test message for Telegram
function formatSPQTelegramMessage(candidateData) {
    const { name, telegram, position, score, analysis } = candidateData;

    let message = `üí™ *–ù–û–í–´–ô –ö–ê–ù–î–ò–î–ê–¢ - –¢–ï–°–¢ 3 SPQ ‚Üí –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö*\n`;
    message += `üè† *–¢–µ—Å—Ç –¥–ª—è –±—Ä–æ–∫–µ—Ä–æ–≤ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏*\n\n`;
    message += `üë§ *–ö–∞–Ω–¥–∏–¥–∞—Ç:* ${name}\n`;
    message += `üì± *Telegram:* @${telegram.replace('@', '')}\n`;
    message += `üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleString('ru-RU')}\n\n`;

    message += `üìä *–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê 3:*\n`;
    message += `üéØ *–ë–∞–ª–ª—ã:* ${score}/30\n`;
    message += `üìà *–£—Ä–æ–≤–µ–Ω—å:* ${analysis.level}\n`;
    message += `üí° *–û–ø–∏—Å–∞–Ω–∏–µ:* ${analysis.description}\n`;
    message += `üîç *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* ${analysis.recommendation}\n\n`;

    // –ê–Ω–∞–ª–∏–∑ SPQ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º
    const spqPercentage = (score / 30) * 100;
    
    if (spqPercentage >= 80) {
        message += `üü¢ *–í–´–°–û–ö–ê–Ø –ù–ê–°–¢–û–ô–ß–ò–í–û–°–¢–¨!* –û—Ç–ª–∏—á–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞.\n`;
        message += `‚úÖ *–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã* - –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö.\n\n`;
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º –¥–ª—è –≤—ã—Å–æ–∫–æ–π –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
        message += `üéØ *–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –î–û–õ–ñ–ù–û–°–¢–ò:*\n`;
        if (spqPercentage >= 85) {
            message += `‚Ä¢ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂ (85-95% –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å)\n`;
            message += `‚Ä¢ –ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä (85-95% –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å)\n`;
        }
        if (spqPercentage >= 80) {
            message += `‚Ä¢ –ë—Ä–æ–∫–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (80-95% –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å)\n`;
            message += `‚Ä¢ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä (80-90% –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å)\n`;
        }
        message += `\n`;
        
    } else if (spqPercentage >= 65) {
        message += `üü° *–°–†–ï–î–ù–ï-–í–´–°–û–ö–ê–Ø –ù–ê–°–¢–û–ô–ß–ò–í–û–°–¢–¨* - —Ö–æ—Ä–æ—à–∏–µ –ø—Ä–æ–¥–∞–∂–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞.\n`;
        message += `‚ö†Ô∏è *–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π* - —Ç—Ä–µ–±—É–µ—Ç –æ—Ü–µ–Ω–∫–∏.\n\n`;
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º –¥–ª—è —Å—Ä–µ–¥–Ω–µ–π –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
        message += `üéØ *–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –î–û–õ–ñ–ù–û–°–¢–ò:*\n`;
        if (spqPercentage >= 65 && spqPercentage <= 80) {
            message += `‚Ä¢ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ (65-80% –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å)\n`;
        }
        if (spqPercentage >= 65 && spqPercentage <= 75) {
            message += `‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä (65-75% –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å)\n`;
        }
        message += `\n`;
        
    } else if (spqPercentage >= 50) {
        message += `üü† *–°–†–ï–î–ù–Ø–Ø –ù–ê–°–¢–û–ô–ß–ò–í–û–°–¢–¨* - –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞.\n`;
        message += `‚ö†Ô∏è *–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–µ–ø—Ä–æ–¥–∞–∂–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π* - —Ç—Ä–µ–±—É–µ—Ç —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞–≤—ã–∫–æ–≤.\n\n`;
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º –¥–ª—è —Å—Ä–µ–¥–Ω–µ–π –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
        message += `üéØ *–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –î–û–õ–ñ–ù–û–°–¢–ò:*\n`;
        message += `‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä (SPQ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω)\n`;
        message += `‚Ä¢ –ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥-–∞–Ω–∞–ª–∏—Ç–∏–∫ (SPQ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω)\n`;
        message += `‚Ä¢ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è (SPQ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º)\n`;
        message += `‚Ä¢ –î–∏–∑–∞–π–Ω–µ—Ä (SPQ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º)\n`;
        message += `‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä (–Ω–∏–∑–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å SPQ)\n`;
        message += `\n`;
        
    } else {
        message += `üî¥ *–ù–ò–ó–ö–ê–Ø –ù–ê–°–¢–û–ô–ß–ò–í–û–°–¢–¨* - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞.\n`;
        message += `‚ùå *–ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø* –¥–ª—è –ø—Ä–æ–¥–∞–∂–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π.\n\n`;
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –Ω–∏–∑–∫–æ–π –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
        message += `üéØ *–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –î–û–õ–ñ–ù–û–°–¢–ò:*\n`;
        message += `‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (–Ω–µ —Ç—Ä–µ–±—É—é—Ç –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö)\n`;
        message += `‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏)\n`;
        message += `‚Ä¢ –ë—ç–∫–æ—Ñ–∏—Å (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤)\n`;
        message += `\n`;
    }

    message += `üîó *–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:* –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è`;

    return message;
}

// Format Hubbard test message for Telegram
function formatHubbardTelegramMessage(candidateData) {
    const { name, telegram, position, score, averageTone, analysis } = candidateData;

    let message = `üìà *–ù–û–í–´–ô –ö–ê–ù–î–ò–î–ê–¢ - –¢–ï–°–¢ 5 ‚Üí –¢–æ–Ω–∞–ª—å–Ω–∞—è —à–∫–∞–ª–∞ –•–∞–±–±–∞—Ä–¥–∞*\n`;
    message += `üéØ *–û–±—â–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π*\n\n`;
    message += `üë§ *–ö–∞–Ω–¥–∏–¥–∞—Ç:* ${name}\n`;
    message += `üì± *Telegram:* @${telegram.replace('@', '')}\n`;
    message += `üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleString('ru-RU')}\n\n`;

    message += `üìä *–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê 5:*\n`;
    message += `üéØ *–û–±—â–∏–π –±–∞–ª–ª:* ${score}/40\n`;
    message += `üìà *–°—Ä–µ–¥–Ω–∏–π —Ç–æ–Ω:* ${averageTone}\n`;
    message += `üí° *–£—Ä–æ–≤–µ–Ω—å:* ${analysis.level}\n`;
    message += `üîç *–û–ø–∏—Å–∞–Ω–∏–µ:* ${analysis.description}\n`;
    message += `‚úÖ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* ${analysis.recommendation}\n\n`;

    // –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º
    const tone = parseFloat(averageTone);
    
    if (tone >= 3.3) {
        message += `üü¢ *–ñ–ò–í–û–ô –¢–û–ù!* –ö–∞–Ω–¥–∏–¥–∞—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π, —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π –∏ –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–π.\n`;
        message += `‚úÖ *–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã* - –≤—ã—Å–æ–∫–∏–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å.\n\n`;
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ —Ç–æ–Ω–∞
        message += `üéØ *–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –î–û–õ–ñ–ù–û–°–¢–ò:*\n`;
        if (tone >= 3.3 && tone <= 4.0) {
            message += `‚Ä¢ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂ (3.3-4.0)\n`;
            message += `‚Ä¢ –ë—Ä–æ–∫–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (3.3-4.0)\n`;
            message += `‚Ä¢ –ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä (3.3-4.0)\n`;
        }
        if (tone >= 3.2 && tone <= 3.8) {
            message += `‚Ä¢ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä (3.2-3.8)\n`;
        }
        if (tone >= 3.0 && tone <= 3.7) {
            message += `‚Ä¢ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ (3.0-3.7)\n`;
        }
        if (tone >= 3.0 && tone <= 3.5) {
            message += `‚Ä¢ –î–∏–∑–∞–π–Ω–µ—Ä (3.0-3.5)\n`;
            message += `‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä (3.0-3.5)\n`;
        }
        message += `\n`;
        
    } else if (tone >= 2.8) {
        message += `üü° *–°–¢–ê–ë–ò–õ–¨–ù–´–ô –¢–û–ù* - –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è.\n`;
        message += `‚ö†Ô∏è *–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π* - —Ç—Ä–µ–±—É–µ—Ç –æ—Ü–µ–Ω–∫–∏.\n\n`;
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —Ç–æ–Ω–∞
        message += `üéØ *–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –î–û–õ–ñ–ù–û–°–¢–ò:*\n`;
        if (tone >= 2.8 && tone <= 3.3) {
            message += `‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä (2.8-3.3)\n`;
        }
        if (tone >= 2.8 && tone <= 3.2) {
            message += `‚Ä¢ –ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥-–∞–Ω–∞–ª–∏—Ç–∏–∫ (2.8-3.2)\n`;
            message += `‚Ä¢ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è (2.8-3.2)\n`;
            message += `‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä (2.8-3.2)\n`;
        }
        message += `\n`;
        
    } else if (tone >= 2.0) {
        message += `üü† *–ù–ò–ó–ö–ò–ô –¢–û–ù* - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.\n`;
        message += `‚ùå *–ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø* –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –ø–æ–∑–∏—Ü–∏–π.\n\n`;
        
    } else {
        message += `üî¥ *–ö–†–ò–¢–ò–ß–ï–°–ö–ò –ù–ò–ó–ö–ò–ô –¢–û–ù* - –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–æ–±–ª–µ–º.\n`;
        message += `‚ùå *–ù–ï –ë–†–ê–¢–¨* - –º–æ–∂–µ—Ç –Ω–∞–Ω–µ—Å—Ç–∏ —É—â–µ—Ä–± –∫–æ–º–ø–∞–Ω–∏–∏.\n\n`;
    }

    message += `üîó *–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:* –°–≤—è–∑–∞—Ç—å—Å—è —Å HR @LyubovTarasova11`;

    return message;
}

// Format Integrity test message for Telegram
function formatIntegrityTelegramMessage(candidateData) {
    const { name, telegram, position, score, analysis } = candidateData;

    let message = `‚úÖ *–ù–û–í–´–ô –ö–ê–ù–î–ò–î–ê–¢ - –¢–ï–°–¢ 6 ‚Üí Integrity Test*\n`;
    message += `üéØ *–û–±—â–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π*\n\n`;
    message += `üë§ *–ö–∞–Ω–¥–∏–¥–∞—Ç:* ${name}\n`;
    message += `üì± *Telegram:* @${telegram.replace('@', '')}\n`;
    message += `üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleString('ru-RU')}\n\n`;

    message += `üìä *–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê 6:*\n`;
    message += `üéØ *–û–±—â–∏–π –±–∞–ª–ª:* ${score}/30\n`;
    message += `üí° *–£—Ä–æ–≤–µ–Ω—å:* ${analysis.level}\n`;
    message += `üîç *–û–ø–∏—Å–∞–Ω–∏–µ:* ${analysis.description}\n`;
    message += `‚úÖ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* ${analysis.recommendation}\n\n`;

    // –ê–Ω–∞–ª–∏–∑ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏
    if (score >= 25) {
        message += `üü¢ *–í–´–°–û–ö–ê–Ø –ß–ï–°–¢–ù–û–°–¢–¨!* –ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞–¥—ë–∂–µ–Ω –∏ —ç—Ç–∏—á–µ–Ω.\n`;
        message += `‚úÖ *–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –Ω–∞–π–º–∞* –Ω–∞ –ª—é–±—ã–µ –ø–æ–∑–∏—Ü–∏–∏, –≤–∫–ª—é—á–∞—è —Ä—É–∫–æ–≤–æ–¥—è—â–∏–µ.\n\n`;
    } else if (score >= 18) {
        message += `üü° *–°–†–ï–î–ù–ò–ô –£–†–û–í–ï–ù–¨ –ß–ï–°–¢–ù–û–°–¢–ò* - –≤–æ–∑–º–æ–∂–Ω—ã –∫–æ–º–ø—Ä–æ–º–∏—Å—Å—ã —Å —ç—Ç–∏–∫–æ–π.\n`;
        message += `‚ö†Ô∏è *–¢—Ä–µ–±—É–µ—Ç –Ω–∞–±–ª—é–¥–µ–Ω–∏—è* - –≤–æ–∑–º–æ–∂–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ä–æ–∫ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º.\n\n`;
    } else if (score >= 12) {
        message += `üü† *–ù–ò–ó–ö–ò–ô –£–†–û–í–ï–ù–¨ –ß–ï–°–¢–ù–û–°–¢–ò* - —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç.\n`;
        message += `‚ùå *–ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø* –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.\n\n`;
    } else {
        message += `üî¥ *–ö–†–ò–¢–ò–ß–ï–°–ö–ò –ù–ò–ó–ö–ê–Ø –ß–ï–°–¢–ù–û–°–¢–¨* - –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–æ–±–ª–µ–º.\n`;
        message += `‚ùå *–ù–ï –ë–†–ê–¢–¨* - –º–æ–∂–µ—Ç –Ω–∞–Ω–µ—Å—Ç–∏ —É—â–µ—Ä–± –∫–æ–º–ø–∞–Ω–∏–∏.\n\n`;
    }

    message += `üîó *–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:* –°–≤—è–∑–∞—Ç—å—Å—è —Å HR @LyubovTarasova11`;

    return message;
}

// Format OCA test message for Telegram
function formatOCATelegramMessage(candidateData) {
    const { name, telegram, position, scores, analysis } = candidateData;

    let message = `üìä *–ù–û–í–´–ô –ö–ê–ù–î–ò–î–ê–¢ - –¢–ï–°–¢ 3 ‚Üí OCA (–û–∫—Å—Ñ–æ—Ä–¥—Å–∫–∏–π —Ç–µ—Å—Ç –ª–∏—á–Ω–æ—Å—Ç–∏)*\n`;
    message += `üéØ *–û–±—â–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π*\n\n`;
    message += `üë§ *–ö–∞–Ω–¥–∏–¥–∞—Ç:* ${name}\n`;
    message += `üì± *Telegram:* @${telegram.replace('@', '')}\n`;
    message += `üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleString('ru-RU')}\n\n`;

    message += `üìä *–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê 3:*\n`;
    message += `üéØ *–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ 10 —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º:*\n`;
    
    const characteristics = [
        '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å', '–°—á–∞—Å—Ç—å–µ', '–ù–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å', '–°–∞–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—å', '–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞',
        '–ö–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å', '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å', '–ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ', '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–£—Ä–æ–≤–µ–Ω—å –æ–±—â–µ–Ω–∏—è'
    ];
    
    characteristics.forEach((char, index) => {
        const score = scores[index];
        let emoji = 'üü¢';
        if (score < 0) emoji = 'üî¥';
        else if (score < 30) emoji = 'üü°';
        
        message += `${emoji} ${char}: ${score}\n`;
    });

    message += `\nüí° *–ê–Ω–∞–ª–∏–∑:* ${analysis.overallAssessment}\n`;
    message += `üîç *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* ${analysis.recommendation}\n\n`;

    // –ê–Ω–∞–ª–∏–∑ –¥–ª—è –≤—Å–µ—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
    if (analysis.suitability === '–û–¢–õ–ò–ß–ù–û') {
        message += `üü¢ *–û–¢–õ–ò–ß–ù–´–ô –ü–†–û–§–ò–õ–¨!* –°—Ç–∞–±–∏–ª—å–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ª—é–±—ã—Ö –ø–æ–∑–∏—Ü–∏–π.\n`;
        message += `‚úÖ *–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –Ω–∞–π–º–∞* –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.\n\n`;
    } else if (analysis.suitability === '–•–û–†–û–®–û') {
        message += `üü° *–•–û–†–û–®–ò–ô –ü–†–û–§–ò–õ–¨* - –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è.\n`;
        message += `‚ö†Ô∏è *–ü–æ–¥—Ö–æ–¥–∏—Ç —Å –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ–º* - –≤–æ–∑–º–æ–∂–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ä–æ–∫.\n\n`;
    } else if (analysis.suitability === '–ü–†–û–ë–õ–ï–ú–ê–¢–ò–ß–ù–û') {
        message += `üü† *–ü–†–û–ë–õ–ï–ú–ê–¢–ò–ß–ù–´–ô –ü–†–û–§–ò–õ–¨* - –µ—Å—Ç—å —Å–µ—Ä—å—ë–∑–Ω—ã–µ –º–∏–Ω—É—Å—ã.\n`;
        message += `‚ùå *–ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø* –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.\n\n`;
    } else {
        message += `üî¥ *–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–†–û–§–ò–õ–¨* - –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.\n`;
        message += `‚ùå *–ù–ï –ë–†–ê–¢–¨* - –º–æ–∂–µ—Ç –Ω–∞–Ω–µ—Å—Ç–∏ —É—â–µ—Ä–± –∫–æ–º–ø–∞–Ω–∏–∏.\n\n`;
    }

    message += `üîó *–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:* –°–≤—è–∑–∞—Ç—å—Å—è —Å HR @LyubovTarasova11`;

    return message;
}

// Format Aptitude test message for Telegram
function formatAptitudeTelegramMessage(candidateData) {
    const { name, telegram, position, scores, analysis } = candidateData;

    let message = `üéØ *–ù–û–í–´–ô –ö–ê–ù–î–ò–î–ê–¢ - –¢–ï–°–¢ 4 ‚Üí Aptitude Test*\n`;
    message += `üéØ *–û–±—â–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π*\n\n`;
    message += `üë§ *–ö–∞–Ω–¥–∏–¥–∞—Ç:* ${name}\n`;
    message += `üì± *Telegram:* @${telegram.replace('@', '')}\n`;
    message += `üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleString('ru-RU')}\n\n`;

    message += `üìä *–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê 4:*\n`;
    message += `üéØ *–û–±—â–∏–π –±–∞–ª–ª:* ${scores.totalScore}/60\n`;
    message += `üîç *–í–Ω–∏–º–∞–Ω–∏–µ:* ${scores.attentionScore}/20\n`;
    message += `üß† *–ü–æ–Ω–∏–º–∞–Ω–∏–µ:* ${scores.understandingScore}/20\n`;
    message += `‚ö° *–õ–æ–≥–∏–∫–∞:* ${scores.logicScore}/20\n`;
    message += `üí° *–£—Ä–æ–≤–µ–Ω—å:* ${analysis.level}\n`;
    message += `üîç *–û–ø–∏—Å–∞–Ω–∏–µ:* ${analysis.recommendation}\n\n`;

    // –ê–Ω–∞–ª–∏–∑ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º
    const attentionPercentage = (scores.attentionScore / 20) * 100;
    const understandingPercentage = (scores.understandingScore / 20) * 100;
    const logicPercentage = (scores.logicScore / 20) * 100;
    
    if (scores.totalScore >= 45) {
        message += `üü¢ *–í–´–°–û–ö–ò–ï –°–ü–û–°–û–ë–ù–û–°–¢–ò!* –û—Ç–ª–∏—á–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ.\n`;
        message += `‚úÖ *–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã* - –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π.\n\n`;
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
        message += `üéØ *–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –î–û–õ–ñ–ù–û–°–¢–ò:*\n`;
        if (understandingPercentage >= 85 && logicPercentage >= 85) {
            message += `‚Ä¢ –ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä (85-95% –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –ª–æ–≥–∏–∫–∞)\n`;
        }
        if (logicPercentage >= 85 && attentionPercentage >= 75) {
            message += `‚Ä¢ –ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥-–∞–Ω–∞–ª–∏—Ç–∏–∫ (85-95% –ª–æ–≥–∏–∫–∞, 75-90% –≤–Ω–∏–º–∞–Ω–∏–µ)\n`;
        }
        if (attentionPercentage >= 80 && logicPercentage >= 80) {
            message += `‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä (80-95% –≤–Ω–∏–º–∞–Ω–∏–µ, 80-90% –ª–æ–≥–∏–∫–∞)\n`;
        }
        if (understandingPercentage >= 75 && logicPercentage >= 75) {
            message += `‚Ä¢ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä (75-90% –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –ª–æ–≥–∏–∫–∞)\n`;
            message += `‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä (75-90% –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –ª–æ–≥–∏–∫–∞)\n`;
        }
        message += `\n`;
        
    } else if (scores.totalScore >= 35) {
        message += `üü° *–°–†–ï–î–ù–ï-–í–´–°–û–ö–ò–ï –°–ü–û–°–û–ë–ù–û–°–¢–ò* - —Ö–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤.\n`;
        message += `‚ö†Ô∏è *–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π* - —Ç—Ä–µ–±—É–µ—Ç –æ—Ü–µ–Ω–∫–∏.\n\n`;
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
        message += `üéØ *–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –î–û–õ–ñ–ù–û–°–¢–ò:*\n`;
        if (understandingPercentage >= 75 && attentionPercentage >= 60) {
            message += `‚Ä¢ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂ (75-90% –ø–æ–Ω–∏–º–∞–Ω–∏–µ)\n`;
        }
        if (understandingPercentage >= 70 && logicPercentage >= 65) {
            message += `‚Ä¢ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ (70-85% –ø–æ–Ω–∏–º–∞–Ω–∏–µ, 65-80% –ª–æ–≥–∏–∫–∞)\n`;
        }
        if (attentionPercentage >= 75 && understandingPercentage >= 65) {
            message += `‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä (75-90% –≤–Ω–∏–º–∞–Ω–∏–µ)\n`;
        }
        if (understandingPercentage >= 75 && logicPercentage >= 60) {
            message += `‚Ä¢ –ë—Ä–æ–∫–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (75-90% –ø–æ–Ω–∏–º–∞–Ω–∏–µ)\n`;
        }
        message += `\n`;
        
    } else if (scores.totalScore >= 25) {
        message += `üü† *–°–†–ï–î–ù–ò–ï –°–ü–û–°–û–ë–ù–û–°–¢–ò* - –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤.\n`;
        message += `‚ö†Ô∏è *–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π* - —Ç—Ä–µ–±—É–µ—Ç —Ä–∞–∑–≤–∏—Ç–∏—è.\n\n`;
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
        message += `üéØ *–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –î–û–õ–ñ–ù–û–°–¢–ò:*\n`;
        if (attentionPercentage >= 80) {
            message += `‚Ä¢ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è (80-95% –≤–Ω–∏–º–∞–Ω–∏–µ)\n`;
        }
        if (attentionPercentage >= 65 && understandingPercentage >= 60) {
            message += `‚Ä¢ –î–∏–∑–∞–π–Ω–µ—Ä (65-80% –≤–Ω–∏–º–∞–Ω–∏–µ, 60-70% –ø–æ–Ω–∏–º–∞–Ω–∏–µ)\n`;
        }
        message += `\n`;
        
    } else {
        message += `üî¥ *–ù–ò–ó–ö–ò–ï –°–ü–û–°–û–ë–ù–û–°–¢–ò* - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.\n`;
        message += `‚ùå *–ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø* –¥–ª—è –ø–æ–∑–∏—Ü–∏–π, —Ç—Ä–µ–±—É—é—â–∏—Ö –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è.\n\n`;
    }

    message += `üîó *–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:* –°–≤—è–∑–∞—Ç—å—Å—è —Å HR @LyubovTarasova11`;

    return message;
}

// API endpoint to receive DISC test results
app.post('/api/submit-disc', async (req, res) => {
    try {
        const { name, telegram, scores, role } = req.body;
        
        // Validate data
        if (!name || !telegram || !scores) {
            return res.status(400).json({ error: 'Missing required fields' });
        }
        
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const user = await User.create({
            fullName: name,
            telegram: telegram,
            role: role || 'broker'
        });
        
        // Analyze the profile
        const analysis = analyzeDISCProfile(scores, role || '–±—Ä–æ–∫–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const testResult = await TestResult.save(user.id, 'DISC', 'personality', {
            score: scores[analysis.dominantType],
            maxScore: 24,
            passed: analysis.suitability !== '–ù–ï –ü–û–î–•–û–î–ò–¢',
            answers: scores,
            analysis: JSON.stringify(analysis)
        });
        
        // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await Session.create(user.id, {
            testCompleted: 'DISC',
            lastActivity: new Date().toISOString()
        });
        
        // Prepare candidate data
        const candidateData = {
            name,
            telegram,
            position: role || '–±—Ä–æ–∫–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
            scores,
            timestamp: new Date().toISOString(),
            userId: user.id,
            testResultId: testResult.id
        };
        
        // Send to Telegram channel
        const message = formatTelegramMessage(candidateData, analysis);
        
        try {
            await bot.sendMessage(CHANNEL_ID, message, { 
                parse_mode: 'Markdown',
                disable_web_page_preview: true
            });
        } catch (telegramError) {
            console.error('Telegram error:', telegramError);
            // Continue even if Telegram fails
        }
        
        // Log to console for debugging
        console.log('DISC test submitted:', candidateData);
        console.log('Analysis:', analysis);
        console.log('Saved to database - User ID:', user.id, 'Test Result ID:', testResult.id);
        
        res.json({ 
            success: true, 
            message: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram –∫–∞–Ω–∞–ª –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
            analysis: analysis,
            userId: user.id
        });
        
    } catch (error) {
        console.error('Error processing DISC test:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// API endpoint to receive EQ test results
app.post('/api/submit-eq', async (req, res) => {
    try {
        const { name, telegram, score, analysis } = req.body;
        
        // Validate data
        if (!name || !telegram || score === undefined || !analysis) {
            return res.status(400).json({ error: 'Missing required fields' });
        }
        
        // Prepare candidate data
        const candidateData = {
            name,
            telegram,
            position: '–±—Ä–æ–∫–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
            score,
            analysis,
            timestamp: new Date().toISOString()
        };
        
        // Send to Telegram channel
        const message = formatEQTelegramMessage(candidateData);
        
        try {
            await bot.sendMessage(CHANNEL_ID, message, { 
                parse_mode: 'Markdown',
                disable_web_page_preview: true
            });
        } catch (telegramError) {
            console.error('Telegram error:', telegramError);
            // Continue even if Telegram fails
        }
        
        // Log to console for debugging
        console.log('EQ test submitted:', candidateData);
        
        res.json({ 
            success: true, 
            message: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram –∫–∞–Ω–∞–ª',
            analysis: analysis
        });
        
    } catch (error) {
        console.error('Error processing EQ test:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// API endpoint to receive SPQ test results
app.post('/api/submit-spq', async (req, res) => {
    try {
        const { name, telegram, score, analysis } = req.body;
        
        // Validate data
        if (!name || !telegram || score === undefined || !analysis) {
            return res.status(400).json({ error: 'Missing required fields' });
        }
        
        // Prepare candidate data
        const candidateData = {
            name,
            telegram,
            position: '–±—Ä–æ–∫–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
            score,
            analysis,
            timestamp: new Date().toISOString()
        };
        
        // Send to Telegram channel
        const message = formatSPQTelegramMessage(candidateData);
        
        try {
            await bot.sendMessage(CHANNEL_ID, message, { 
                parse_mode: 'Markdown',
                disable_web_page_preview: true
            });
        } catch (telegramError) {
            console.error('Telegram error:', telegramError);
            // Continue even if Telegram fails
        }
        
        // Log to console for debugging
        console.log('SPQ test submitted:', candidateData);
        
        res.json({ 
            success: true, 
            message: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram –∫–∞–Ω–∞–ª',
            analysis: analysis
        });
        
    } catch (error) {
        console.error('Error processing SPQ test:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// API endpoint to receive Hubbard test results
app.post('/api/submit-hubbard', async (req, res) => {
    try {
        const { name, telegram, score, averageTone, analysis } = req.body;

        // Validate data
        if (!name || !telegram || score === undefined || !analysis) {
            return res.status(400).json({ error: 'Missing required fields' });
        }

        // Prepare candidate data
        const candidateData = {
            name,
            telegram,
            position: '–æ–±—â–∏–µ —Ç–µ—Å—Ç—ã', // General test
            score,
            averageTone,
            analysis,
            timestamp: new Date().toISOString()
        };

        // Send to Telegram channel
        const message = formatHubbardTelegramMessage(candidateData);

        try {
            await bot.sendMessage(CHANNEL_ID, message, {
                parse_mode: 'Markdown',
                disable_web_page_preview: true
            });
        } catch (telegramError) {
            console.error('Telegram error:', telegramError);
            // Continue even if Telegram fails
        }

        // Log to console for debugging
        console.log('Hubbard test submitted:', candidateData);

        res.json({
            success: true,
            message: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram –∫–∞–Ω–∞–ª',
            analysis: analysis
        });

    } catch (error) {
        console.error('Error processing Hubbard test:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// API endpoint to receive Integrity test results
app.post('/api/submit-integrity', async (req, res) => {
    try {
        const { name, telegram, score, analysis } = req.body;

        // Validate data
        if (!name || !telegram || score === undefined || !analysis) {
            return res.status(400).json({ error: 'Missing required fields' });
        }

        // Prepare candidate data
        const candidateData = {
            name,
            telegram,
            position: '–æ–±—â–∏–µ —Ç–µ—Å—Ç—ã', // General test
            score,
            analysis,
            timestamp: new Date().toISOString()
        };

        // Send to Telegram channel
        const message = formatIntegrityTelegramMessage(candidateData);

        try {
            await bot.sendMessage(CHANNEL_ID, message, {
                parse_mode: 'Markdown',
                disable_web_page_preview: true
            });
        } catch (telegramError) {
            console.error('Telegram error:', telegramError);
            // Continue even if Telegram fails
        }

        // Log to console for debugging
        console.log('Integrity test submitted:', candidateData);

        res.json({
            success: true,
            message: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram –∫–∞–Ω–∞–ª',
            analysis: analysis
        });

    } catch (error) {
        console.error('Error processing Integrity test:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// API endpoint to receive OCA test results
app.post('/api/submit-oca', async (req, res) => {
    try {
        const { name, telegram, scores, analysis } = req.body;

        // Validate data
        if (!name || !telegram || !scores || !analysis) {
            return res.status(400).json({ error: 'Missing required fields' });
        }

        // Prepare candidate data
        const candidateData = {
            name,
            telegram,
            position: '–æ–±—â–∏–µ —Ç–µ—Å—Ç—ã', // General test
            scores,
            analysis,
            timestamp: new Date().toISOString()
        };

        // Send to Telegram channel
        const message = formatOCATelegramMessage(candidateData);

        try {
            await bot.sendMessage(CHANNEL_ID, message, {
                parse_mode: 'Markdown',
                disable_web_page_preview: true
            });
        } catch (telegramError) {
            console.error('Telegram error:', telegramError);
            // Continue even if Telegram fails
        }

        // Log to console for debugging
        console.log('OCA test submitted:', candidateData);

        res.json({
            success: true,
            message: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram –∫–∞–Ω–∞–ª',
            analysis: analysis
        });

    } catch (error) {
        console.error('Error processing OCA test:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// API endpoint to receive Aptitude test results
app.post('/api/submit-aptitude', async (req, res) => {
    try {
        const { name, telegram, scores, analysis } = req.body;

        // Validate data
        if (!name || !telegram || !scores || !analysis) {
            return res.status(400).json({ error: 'Missing required fields' });
        }

        // Prepare candidate data
        const candidateData = {
            name,
            telegram,
            position: '–æ–±—â–∏–µ —Ç–µ—Å—Ç—ã', // General test
            scores,
            analysis,
            timestamp: new Date().toISOString()
        };

        // Send to Telegram channel
        const message = formatAptitudeTelegramMessage(candidateData);

        try {
            await bot.sendMessage(CHANNEL_ID, message, {
                parse_mode: 'Markdown',
                disable_web_page_preview: true
            });
        } catch (telegramError) {
            console.error('Telegram error:', telegramError);
            // Continue even if Telegram fails
        }

        // Log to console for debugging
        console.log('Aptitude test submitted:', candidateData);

        res.json({
            success: true,
            message: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram –∫–∞–Ω–∞–ª',
            analysis: analysis
        });

    } catch (error) {
        console.error('Error processing Aptitude test:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// KFU test submission endpoint
app.post('/submit-kfu', async (req, res) => {
    try {
        const { candidateData, answers, passed, score } = req.body;

        // Validate data
        if (!candidateData || !answers || passed === undefined) {
            return res.status(400).json({ error: 'Missing required fields' });
        }

        // Prepare candidate data
        const kfuData = {
            name: candidateData.fullName,
            telegram: candidateData.telegram,
            position: candidateData.role,
            answers,
            passed,
            score,
            timestamp: new Date().toISOString()
        };

        // Send to Telegram channel
        const message = formatKFUTelegramMessage(kfuData);

        try {
            await bot.sendMessage(CHANNEL_ID, message, {
                parse_mode: 'Markdown',
                disable_web_page_preview: true
            });
        } catch (telegramError) {
            console.error('Telegram error:', telegramError);
            // Continue even if Telegram fails
        }

        // Log to console for debugging
        console.log('KFU test submitted:', kfuData);

        res.json({
            success: true,
            message: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram –∫–∞–Ω–∞–ª',
            passed: passed
        });

    } catch (error) {
        console.error('Error processing KFU test:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Health check endpoint
app.get('/health', (req, res) => {
    console.log('Health check requested');
    try {
        res.json({ 
            status: 'OK', 
            timestamp: new Date().toISOString(),
            port: PORT,
            uptime: process.uptime()
        });
    } catch (error) {
        console.error('Health check error:', error);
        res.status(500).json({ status: 'ERROR', error: error.message });
    }
});

// Serve the main page with test overview
app.get('/', (req, res) => {
    res.sendFile(__dirname + '/public/index.html');
});

// Serve tests with short codes
app.get('/t1', (req, res) => {
    res.sendFile(__dirname + '/public/general/disc-test.html');
});

app.get('/t2', (req, res) => {
    res.sendFile(__dirname + '/public/general/hubbard-test.html');
});

app.get('/t3', (req, res) => {
    res.sendFile(__dirname + '/public/general/eq-test.html');
});

app.get('/t4', (req, res) => {
    res.sendFile(__dirname + '/public/general/aptitude-test.html');
});

app.get('/t5', (req, res) => {
    res.sendFile(__dirname + '/public/general/integrity-test.html');
});

app.get('/t6', (req, res) => {
    res.sendFile(__dirname + '/public/general/oca-test.html');
});

app.get('/b1', (req, res) => {
    res.sendFile(__dirname + '/public/broker/spq-test.html');
});

// KFU test for managers
app.get('/kfu', (req, res) => {
    res.sendFile(__dirname + '/public/manager/kfu-manager-test.html');
});

// Legacy routes for backward compatibility
app.get('/general/disc-test.html', (req, res) => {
    res.redirect('/t1');
});

app.get('/general/hubbard-test.html', (req, res) => {
    res.redirect('/t2');
});

app.get('/general/oca-test.html', (req, res) => {
    res.redirect('/t3');
});

app.get('/general/eq-test.html', (req, res) => {
    res.redirect('/t4');
});

app.get('/general/aptitude-test.html', (req, res) => {
    res.redirect('/t5');
});

app.get('/general/integrity-test.html', (req, res) => {
    res.redirect('/t6');
});

app.get('/broker/spq-test.html', (req, res) => {
    res.redirect('/b1');
});

// Legacy routes for backward compatibility
app.get('/disc-test.html', (req, res) => {
    res.redirect('/general/disc-test.html');
});

app.get('/test2', (req, res) => {
    res.redirect('/general/eq-test.html');
});

app.get('/test3', (req, res) => {
    res.redirect('/broker/spq-test.html');
});

// Function to format KFU test results for Telegram
function formatKFUTelegramMessage(data) {
    const status = data.passed ? 'üü¢ –ü–†–û–ô–î–ï–ù–´' : 'üî¥ –ù–ï –ü–†–û–ô–î–ï–ù–´';
    const result = data.passed ? '‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–∞–∑–æ–≤—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º' : '‚ùå –ö–∞–Ω–¥–∏–¥–∞—Ç –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–∞–∑–æ–≤—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º';
    
    return `üéØ **–ö–§–£ ‚Üí –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞**

üë§ **–ö–∞–Ω–¥–∏–¥–∞—Ç:** ${data.name}
üì± **Telegram:** ${data.telegram}
üíº **–î–æ–ª–∂–Ω–æ—Å—Ç—å:** ${data.position}

üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
‚Ä¢ **–°—Ç–∞—Ç—É—Å:** ${status}
‚Ä¢ **–ë–∞–ª–ª—ã:** ${data.score}
‚Ä¢ **–ò—Ç–æ–≥:** ${result}

üìù **–û—Ç–≤–µ—Ç—ã:**
1. –û–ø—ã—Ç –≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: ${data.answers.question1}
2. –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: ${data.answers.question2}
3. –û–ø—ã—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${data.answers.question3}
4. –ö–ª—é—á–µ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞: ${data.answers.question4}
5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞: ${data.answers.question5}
6. –†–∞–±–æ—Ç–∞ —Å–æ —Å–ª–∞–±—ã–º–∏: ${data.answers.question6}
7. –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ–ø—ã—Ç: ${data.answers.question7}
8. –†–∞–±–æ—Ç–∞ —Å CRM: ${data.answers.question8}

‚è∞ **–í—Ä–µ–º—è:** ${new Date(data.timestamp).toLocaleString('ru-RU')}`;
}

// API endpoints for admin panel

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/users', async (req, res) => {
    try {
        const users = await User.getAll();
        res.json({ success: true, data: users });
    } catch (error) {
        console.error('Error fetching users:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–æ–ª—è–º
app.get('/api/stats/roles', async (req, res) => {
    try {
        const stats = await User.getStatsByRole();
        res.json({ success: true, data: stats });
    } catch (error) {
        console.error('Error fetching role stats:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
app.get('/api/test-results', async (req, res) => {
    try {
        const results = await TestResult.getAll();
        res.json({ success: true, data: results });
    } catch (error) {
        console.error('Error fetching test results:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user/:userId/results', async (req, res) => {
    try {
        const userId = req.params.userId;
        const results = await TestResult.getByUser(userId);
        res.json({ success: true, data: results });
    } catch (error) {
        console.error('Error fetching user results:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ä–æ–ª–∏
app.get('/api/results/role/:role', async (req, res) => {
    try {
        const role = req.params.role;
        const results = await TestResult.getByRole(role);
        res.json({ success: true, data: results });
    } catch (error) {
        console.error('Error fetching results by role:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ—Å—Ç–∞–º
app.get('/api/stats/tests', async (req, res) => {
    try {
        const stats = await TestResult.getStats();
        res.json({ success: true, data: stats });
    } catch (error) {
        console.error('Error fetching test stats:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
app.get('/api/sessions/active', async (req, res) => {
    try {
        const sessions = await Session.getActive();
        res.json({ success: true, data: sessions });
    } catch (error) {
        console.error('Error fetching active sessions:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
app.get('/api/stats/overview', async (req, res) => {
    try {
        const [users, testStats, roleStats] = await Promise.all([
            User.getAll(),
            TestResult.getStats(),
            User.getStatsByRole()
        ]);
        
        const totalUsers = users.length;
        const activeUsers = users.filter(u => u.is_active).length;
        const totalTests = testStats.reduce((sum, stat) => sum + stat.total_attempts, 0);
        
        res.json({
            success: true,
            data: {
                totalUsers,
                activeUsers,
                totalTests,
                usersByRole: roleStats,
                testStats
            }
        });
    } catch (error) {
        console.error('Error fetching overview stats:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
process.on('uncaughtException', (error) => {
    console.error('Uncaught Exception:', error);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});

console.log('Starting server...');
console.log('PORT:', PORT);
console.log('Environment variables loaded');

app.listen(PORT, () => {
    console.log(`üöÄ DISC Bot server running on port ${PORT}`);
    console.log(`üì± Telegram Bot Token: ${process.env.TELEGRAM_BOT_TOKEN ? '‚úÖ Set' : '‚ùå Missing'}`);
    console.log(`üì∫ Channel ID: ${process.env.TELEGRAM_CHANNEL_ID ? '‚úÖ Set' : '‚ùå Missing'}`);
    console.log(`üåê Main page: index.html with test overview`);
    console.log(`üóÑÔ∏è Database: SQLite connected`);
    console.log('Server started successfully!');
}).on('error', (error) => {
    console.error('Server error:', error);
    process.exit(1);
});
